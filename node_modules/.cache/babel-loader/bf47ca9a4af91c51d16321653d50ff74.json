{"ast":null,"code":"var _jsxFileName = \"H:\\\\BSUIR\\\\Web\\\\Test task React NiblSoft\\\\my-app\\\\src\\\\components\\\\MainPage\\\\geoMap.js\";\nimport React from 'react';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\nimport Geocode from \"react-geocode\";\n\nclass GeoMap extends React.PureComponent {\n  constructor() {\n    super();\n    this._isMounted = false;\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n  }\n\n  render() {\n    if (this._isMounted) {}\n\n    const geoFindMe = () => {\n      const success = position => {\n        const latitude = position.coords.latitude;\n        const longitude = position.coords.longitude;\n        Geocode.setApiKey(\"AIzaSyDal_A90HrAXBxIgC4jH4MyCKcbPTSnlJo\");\n        Geocode.fromLatLng(latitude, longitude).then(response => {\n          const address = response.results[0].formatted_address;\n\n          const gettingWeather = async () => {\n            const api_url = await fetch(`https://openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=439d4b804bc8187953eb36d2a8c26a02&units=metric`);\n            const data = await api_url.json();\n            console.log(data);\n            const temp = data.main.temp;\n            const feelsLike = data.main.feels_like;\n            const description = data.weather[0].description;\n            this.props.addItem(latitude, longitude, address, temp, feelsLike, description);\n          };\n\n          gettingWeather();\n        }, error => {\n          console.error(error);\n        });\n      };\n\n      navigator.geolocation.getCurrentPosition(success);\n    };\n\n    const containerStyle = {\n      margin: \"auto\",\n      width: '70vw',\n      height: '100vh'\n    };\n    const center = {\n      lat: this.props.latitude,\n      lng: this.props.longitude\n    };\n\n    const onMapLoad = map => {\n      console.log('map.data: ', map.data); // map.data.loadGeoJson('/geo.json')\n    };\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => {\n        geoFindMe();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }\n    }, \"Find me\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }\n    }, \"Latitude: \", this.props.latitude, \", Longitude: \", this.props.longitude, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }\n    }, \"Address: \", this.props.address), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }\n    }, \"Temperature: \", this.props.temp, \" degrees Celsius\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 71\n      }\n    }), \"Feels Like: \", this.props.feelsLike, \" degrees Celsius\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 75\n      }\n    }), \"Description: \", this.props.description)), /*#__PURE__*/React.createElement(LoadScript, {\n      googleMapsApiKey: \"AIzaSyDal_A90HrAXBxIgC4jH4MyCKcbPTSnlJo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(GoogleMap, {\n      mapContainerStyle: containerStyle,\n      center: center,\n      zoom: 19,\n      onLoad: onMapLoad,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Marker, {\n      position: center,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(React.Fragment, null))));\n  }\n\n}\n\nexport default GeoMap;","map":{"version":3,"sources":["H:/BSUIR/Web/Test task React NiblSoft/my-app/src/components/MainPage/geoMap.js"],"names":["React","GoogleMap","LoadScript","Marker","Geocode","GeoMap","PureComponent","constructor","_isMounted","componentDidMount","render","geoFindMe","success","position","latitude","coords","longitude","setApiKey","fromLatLng","then","response","address","results","formatted_address","gettingWeather","api_url","fetch","data","json","console","log","temp","main","feelsLike","feels_like","description","weather","props","addItem","error","navigator","geolocation","getCurrentPosition","containerStyle","margin","width","height","center","lat","lng","onMapLoad","map"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport {GoogleMap, LoadScript, Marker} from '@react-google-maps/api';\r\nimport Geocode from \"react-geocode\";\r\n\r\nclass GeoMap extends React.PureComponent {\r\n    constructor() {\r\n        super();\r\n        this._isMounted = false;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this._isMounted = true;\r\n\r\n\r\n\r\n\r\n    }\r\n    render() {\r\nif (this._isMounted) {\r\n\r\n}\r\n        const geoFindMe = () => {\r\n\r\n            const success = position => {\r\n                const latitude = position.coords.latitude;\r\n                const longitude = position.coords.longitude;\r\n\r\n                Geocode.setApiKey(\"AIzaSyDal_A90HrAXBxIgC4jH4MyCKcbPTSnlJo\");\r\n                Geocode.fromLatLng(latitude, longitude).then(\r\n                    response => {\r\n                        const address = response.results[0].formatted_address;\r\n\r\n                        const gettingWeather = async () => {\r\n                            const api_url =\r\n                                await fetch(`https://openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=439d4b804bc8187953eb36d2a8c26a02&units=metric`);\r\n                            const data = await api_url.json();\r\n                            console.log(data);\r\n                            const temp = data.main.temp\r\n                            const feelsLike = data.main.feels_like\r\n                            const description = data.weather[0].description\r\n                            this.props.addItem(latitude, longitude, address, temp, feelsLike, description);\r\n                        }\r\n                        gettingWeather()\r\n\r\n\r\n                    },\r\n                    error => {\r\n                        console.error(error);\r\n                    }\r\n                );\r\n            };\r\n            navigator.geolocation.getCurrentPosition(success);\r\n        };\r\n\r\n        const containerStyle = {\r\n            margin: \"auto\",\r\n            width: '70vw',\r\n            height: '100vh'\r\n        };\r\n\r\n        const center = {\r\n            lat: this.props.latitude,\r\n            lng: this.props.longitude\r\n        };\r\n\r\n        const onMapLoad = map => {\r\n            console.log('map.data: ', map.data)\r\n            // map.data.loadGeoJson('/geo.json')\r\n        }\r\n\r\n        return (\r\n\r\n            <div>\r\n                <button onClick={() => {\r\n                    geoFindMe()\r\n\r\n                }}>Find me\r\n                </button>\r\n\r\n                <div>\r\n                    Latitude: {this.props.latitude}, Longitude: {this.props.longitude}\r\n                    <p>\r\n                        Address: {this.props.address}\r\n                    </p>\r\n                    <div>\r\n                        Temperature: {this.props.temp} degrees Celsius<br/>\r\n                        Feels Like: {this.props.feelsLike} degrees Celsius<br/>\r\n                        Description: {this.props.description}\r\n                    </div>\r\n                </div>\r\n\r\n                <LoadScript\r\n                    googleMapsApiKey=\"AIzaSyDal_A90HrAXBxIgC4jH4MyCKcbPTSnlJo\"\r\n                >\r\n                    <GoogleMap\r\n                        mapContainerStyle={containerStyle}\r\n                        center={center}\r\n                        zoom={19}\r\n                        onLoad={onMapLoad}\r\n                    >\r\n                        <Marker\r\n                            position={center}\r\n                        />\r\n                        <></>\r\n                    </GoogleMap>\r\n                </LoadScript>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GeoMap;"]},"metadata":{},"sourceType":"module"}