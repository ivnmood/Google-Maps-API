{"ast":null,"code":"var _jsxFileName = \"H:\\\\BSUIR\\\\Web\\\\Test task React NiblSoft\\\\my-app\\\\src\\\\components\\\\MainPage\\\\geoMap.js\";\nimport React, { useEffect } from 'react';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\nimport Geocode from \"react-geocode\";\nimport style from \"./style.css\";\n\nconst GeoMap = props => {\n  useEffect(() => {\n    const geoFindMe = () => {\n      const success = position => {\n        const latitude = position.coords.latitude;\n        const longitude = position.coords.longitude;\n        Geocode.setApiKey(\"AIzaSyDal_A90HrAXBxIgC4jH4MyCKcbPTSnlJo\");\n        Geocode.fromLatLng(latitude, longitude).then(response => {\n          const address = response.results[0].formatted_address;\n\n          const gettingWeather = async () => {\n            const api_url = await fetch(`https://openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=439d4b804bc8187953eb36d2a8c26a02&units=metric`);\n            const data = await api_url.json();\n            console.log(data);\n            const temp = data.main.temp;\n            const feelsLike = data.main.feels_like;\n            const description = data.weather[0].description;\n            props.addItem(latitude, longitude, address, temp, feelsLike, description);\n          };\n\n          gettingWeather();\n        }, error => {\n          console.error(error);\n        });\n      };\n\n      navigator.geolocation.getCurrentPosition(success);\n    };\n\n    geoFindMe();\n  }, []);\n  const containerStyle = {\n    margin: \"auto\",\n    width: '70vw',\n    height: '100vh'\n  };\n  const center = {\n    lat: props.latitude,\n    lng: props.longitude\n  };\n\n  const onMapLoad = map => {\n    console.log('map.data: ', map.data); // map.data.loadGeoJson('/geo.json')\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: style.info,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, \"Latitude: \", props.latitude, \", Longitude: \", props.longitude, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }\n  }, \"Address: \", props.address), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }\n  }, \"Temperature: \", props.temp, \" degrees Celsius\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 62\n    }\n  }), \"Feels Like: \", props.feelsLike, \" degrees Celsius\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 66\n    }\n  }), \"Description: \", props.description)), /*#__PURE__*/React.createElement(LoadScript, {\n    googleMapsApiKey: \"AIzaSyDal_A90HrAXBxIgC4jH4MyCKcbPTSnlJo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(GoogleMap, {\n    mapContainerStyle: containerStyle,\n    center: center,\n    zoom: 19,\n    onLoad: onMapLoad,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Marker, {\n    position: center,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(React.Fragment, null))));\n};\n\nexport default GeoMap;","map":{"version":3,"sources":["H:/BSUIR/Web/Test task React NiblSoft/my-app/src/components/MainPage/geoMap.js"],"names":["React","useEffect","GoogleMap","LoadScript","Marker","Geocode","style","GeoMap","props","geoFindMe","success","position","latitude","coords","longitude","setApiKey","fromLatLng","then","response","address","results","formatted_address","gettingWeather","api_url","fetch","data","json","console","log","temp","main","feelsLike","feels_like","description","weather","addItem","error","navigator","geolocation","getCurrentPosition","containerStyle","margin","width","height","center","lat","lng","onMapLoad","map","info"],"mappings":"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","sourcesContent":["import React, {useEffect} from 'react'\r\nimport {GoogleMap, LoadScript, Marker} from '@react-google-maps/api';\r\nimport Geocode from \"react-geocode\";\r\nimport style from \"./style.css\"\r\n\r\nconst GeoMap = (props) => {\r\n\r\n    useEffect(() => {\r\n        const geoFindMe = () => {\r\n\r\n            const success = position => {\r\n                const latitude = position.coords.latitude;\r\n                const longitude = position.coords.longitude;\r\n\r\n                Geocode.setApiKey(\"AIzaSyDal_A90HrAXBxIgC4jH4MyCKcbPTSnlJo\");\r\n                Geocode.fromLatLng(latitude, longitude).then(\r\n                    response => {\r\n                        const address = response.results[0].formatted_address;\r\n\r\n                        const gettingWeather = async () => {\r\n                            const api_url =\r\n                                await fetch(`https://openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=439d4b804bc8187953eb36d2a8c26a02&units=metric`);\r\n                            const data = await api_url.json();\r\n                            console.log(data);\r\n                            const temp = data.main.temp\r\n                            const feelsLike = data.main.feels_like\r\n                            const description = data.weather[0].description\r\n                            props.addItem(latitude, longitude, address, temp, feelsLike, description);\r\n                        }\r\n                        gettingWeather()\r\n\r\n\r\n                    },\r\n                    error => {\r\n                        console.error(error);\r\n                    }\r\n                );\r\n            };\r\n            navigator.geolocation.getCurrentPosition(success);\r\n        };\r\n        geoFindMe()\r\n    }, [])\r\n\r\n\r\n\r\n    const containerStyle = {\r\n        margin: \"auto\",\r\n        width: '70vw',\r\n        height: '100vh'\r\n    };\r\n\r\n    const center = {\r\n        lat: props.latitude,\r\n        lng: props.longitude\r\n    };\r\n\r\n    const onMapLoad = map => {\r\n        console.log('map.data: ', map.data)\r\n        // map.data.loadGeoJson('/geo.json')\r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n            <div className={style.info}>\r\n                Latitude: {props.latitude}, Longitude: {props.longitude}\r\n                <p>\r\n                    Address: {props.address}\r\n                </p>\r\n                <div>\r\n                    Temperature: {props.temp} degrees Celsius<br/>\r\n                    Feels Like: {props.feelsLike} degrees Celsius<br/>\r\n                    Description: {props.description}\r\n                </div>\r\n            </div>\r\n\r\n            <LoadScript\r\n                googleMapsApiKey=\"AIzaSyDal_A90HrAXBxIgC4jH4MyCKcbPTSnlJo\"\r\n            >\r\n                <GoogleMap\r\n                    mapContainerStyle={containerStyle}\r\n                    center={center}\r\n                    zoom={19}\r\n                    onLoad={onMapLoad}\r\n                >\r\n                    <Marker\r\n                        position={center}\r\n                    />\r\n                    <></>\r\n                </GoogleMap>\r\n            </LoadScript>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GeoMap;"]},"metadata":{},"sourceType":"module"}